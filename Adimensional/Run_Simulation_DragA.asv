function Testdata = Run_Simulation_DragA(ID_A,nlm)
    %Compute the D,t of the slab detachment.
    %======================================================================
    % Output Parameter: 
    % Testdata => structure containing all the solution output that are then
    % used for the data reduction 
    %======================================================================
    % Input Parameter: 
    % ID_A => Initial data structure containing all the rheological parameter
    % of the slab and upper mantle adimensional
    % Short description:
    % => Create a function handle to introduce into ode15i (variable method to
    % solve non linear implicit function)
    % => use and do plot
    % =>save the associated vector in a structure and compute the next solution
    %======================================================================
    % 
    Benchmark = 0 ;
    if(nargin==0)
       % Benchmark = 1;  
        ID_ = Compute_slab_characteristics(NaN);
        ID_A  = ID_.ID_A;
        nlm   = Problem_type.Linear; 
    end
    
    % 1) Assuming that drag force is not active
    dDdt0 = -ID_A.dDdtB;
    % Create function handle 
    Funf_wi = @(t,x,xp0) compute_dragODEA(x,xp0,ID_A,nlm);
    % Set the option for resolving the system of equation
    options = odeset('RelTol',1e-12,'NormControl','on','Events',@(t,x,xp0) det_EV(t,x,xp0,ID_A));
    % resolve the system
    [t,D,te,De,ie] = ode15i(Funf_wi,[0 10],ID_A.D0,dDdt0,options);
    [Testdata]=postprocess_data(t,D,ID_A,te,De,ie,0,nlm); 
    if nargin == 0 
    % run the twin test adimensional and check the residuum between the two
    % functions. {Is giving allmost the same results?)
    Testdata_D = Run_Simulation_Drag(ID_,1.0);
    % Interpolate the results and plot them: 
    [Intp_data]=Interpolation_routinesAD(Testdata_D,Testdata,Benchmark);
    plot_benchmark(Intp_data,ID_,Testdata.D_norm,0.0)
    end

end

function [res] = compute_dragODEA(D,dDdt,ID_A,nlm)
    % Output: 
    % res => Residuum of non linear equation
    %======================================================================
    % Input : 
    % D    => Current thickness
    % dDdt => Current time derivatives
    % ID   => Initial Data structure 
    % Short description: recast the equation dDdt = -D(B(tau)^n+B(tau)) in
    % terms of residuum. This function is the right form to use with ODE15.
    % and cast the problem of necking in term of optimization. 
    %======================================================================
    % Compute the effective stress 
    [tau_eff,tau_B,tau_D]         = Compute_Effective_StressA(D,dDdt,ID_A,nlm);
    [epsilon_eff,eps_dif,eps_dis] = Compute_StrainA(ID_A,tau_eff);
    res                           = -D*(epsilon_eff)-dDdt;
end
% Event detection (not difficult, though, i just copied the matlab help
% page (which has been copied also by Marcel in his code) 
function [position,isterminal,direction] = det_EV(t,y,yp0,ID)
    position = y(1)-0.1; % The value that we want to be zero
    % To be precise, each time step y(1) is the actual thickness. so,
    % D(t)-0.1*D0 must be 0 to stop the simulation and having an event. 
    % Additional mistake that I did the function handle must incorporate the
    % derivative too. 
    isterminal = 1;  % Halt integration 
    direction = 0;   % The zero can be approached from either direction
end
