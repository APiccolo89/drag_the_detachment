function Testdata = Run_Simulation_Drag(Initial_Data,name_1)
%Compute the D,t of the slab detachment. 
% Input Parameter: D0 = initial length 
%                  L0 = initial length
%                  drho = density contrast
%                  viscosity of the mantle
%                  B_d/n diffusion and dislocation creep compliance
%                  computed with the reference viscosity and stress 
% Alg: 
% => Compute the charcacteristic time
% => Compute the analytical solution detachment time 
% => Optimize the initial dDdt using fzero 
%                 a) Create a function handle to compute the initial
%                 guess(compute_guess_ddt)
%                 b) Create dDdt0 assuming no drag force
%                 c) Use Fzero and find dDdtA the initial dDdta 
% => Create a function handle to introduce into ode15i (variable method to
% solve non linear implicit function)
% => use and do plot
% =>save the associated vector in a structure and compute the next solution
%%
%Main Function

% Compute the initial guess of the dDdt 
% 1) Assuming that drag force is not active
dDdt0 = compute_guess_ddt(Initial_Data);
% Create function handle 
Funf_wi = @(t,x,xp0) compute_dragODE(x,xp0,Initial_Data);
% Set the option for resolving the system of equation
options = odeset('RelTol',1e-8,'NormControl','on');
% resolve the system
[t,D] = ode15i(Funf_wi,[0 20*td],ID.D0,dDdt0,options);
% Normalize the thickness vector
D_norm = D/ID.D0;
% save relevant data of the simulation:
Testdata(1,:)=t/td; %time vector divided by the 
Testdata(2,:)=D_norm;
end


function [dDdt0] = compute_guess_ddt(ID)
% Output:
% [dDdt0] => initial buoyancy related necking velocity
% Input: 
% ID => Initial data structure
% 
% Compute the initial dDdt assuming that no drag forces are active

% Buoyancy stress computed using F_B formulation
tau = (ID.drho*ID.D0*ID.l0*9.81)/2/D;

% Initial necking velocity
dDdt0 = (-D*(B_n*tau^n+B_d*tau));
end


function [res] = compute_dragODE(D,dDdt,ID)
% Output: 
% res => Residuum of non linear equation 
% Input : 
% D    => Current thickness
% dDdt => Current time derivatives
% ID   => Initial Data structure 
% Short description: recast the equation dDdt = -D(B(tau)^n+B(tau)) in
% terms of residuum. This function is the right form to use with ODE15.
% and cast the problem of necking in term of optimization. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute the effective stress 
[tau_eff] = compute_the_effective_stress(D,dDdt,ID);
res = -D*(ID.B_n*(tau_eff)^n+ID.B_d*(tau_eff))-dDdt;
end


function [tau_eff] = compute_the_effective_stress(D,dDdt,ID)
% Output: 
% tau_eff  = effective stress 
% Input :
% D  => Actual thickness of the slab
% dDdt => Actual rate of necking
% ID => Initial data structure 
%
% Short description: 
% Compute the stress related to the buoyancy (tau_B) 
% Compute the stress associated with the drag force acting in the lateral 
% boundary of the slab (tau_D)
% tau_eff = tau_B+tau_D
l = ID.l0/1000e3; % initial length divded by the size of the model (or initial thickness of the slab)
% Buoyancy stress computed tau_B = F_B/2/D; 
tau_B = (ID.drho*ID.D0*ID.l0*9.81)/2/D;
% Drag force related stress compute formulation of Bercovici et al 2015 
tau_D = (2*ID.etaum*alpha*(ID.D0^2/D^2)*dDdt*l)/2/D;
% Effective stress
tau_eff = tau_B+tau_D;
end


